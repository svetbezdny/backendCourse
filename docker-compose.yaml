services:
  booking_service:
    container_name: booking_back
    build:
      context: .
    ports:
      - 80:8000
    networks:
      - booking_network
    env_file:
      - .env
    depends_on:
      booking_db:
        condition: service_healthy
      booking_redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  booking_db:
    image: postgres:17
    container_name: booking_db
    ports:
      - 5433:5432
    environment:
      POSTGRES_USER: ${DB_LOGIN}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    networks:
      - booking_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_LOGIN} -d ${DB_PASS}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  booking_redis:
    image: redis
    container_name: booking_redis
    ports:
      - 6379:6379
    networks:
      - booking_network
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s


networks:
  booking_network:
    name: booking_network
    driver: bridge

volumes:
  postgres_data:
  redis_data:
